[
  {
    "question": "배열이란 무엇인가요?",
    "answer": "배열은 연속된 메모리 위치에 같은 데이터 타입의 요소를 저장하는 자료구조입니다. 각 요소는 인덱스를 통해 접근할 수 있습니다.",
    "category": "자료 구조",
    "keywords": ["배열", "메모리", "인덱스", "자료구조"]
  },
  {
    "question": "배열의 장단점은 무엇인가요?",
    "answer": "배열의 장점으로는 빠른 접근과 삽입/삭제 연산이 가능하며, 인덱스를 통한 탐색이 빠릅니다. 단점으로는 크기가 고정되어 있어 크기를 변경할 수 없으며, 삽입/삭제 연산이 느리고 메모리 낭비가 될 수 있습니다.",
    "category": "자료 구조",
    "keywords": ["배열", "접근", "삽입", "삭제", "메모리"]
  },
  {
    "question": "연결 리스트란 무엇인가요?",
    "answer": "연결 리스트는 각 노드가 데이터와 다음 노드를 가리키는 포인터로 구성된 자료구조입니다. 각 노드는 메모리의 임의 위치에 저장됩니다.",
    "category": "자료 구조",
    "keywords": ["연결 리스트", "노드", "포인터", "메모리"]
  },
  {
    "question": "연결 리스트의 장단점은 무엇인가요?",
    "answer": "연결 리스트의 장점으로는 크기가 동적으로 조정될 수 있고 삽입/삭제 연산이 빠릅니다. 단점으로는 임의 접근이 불가능하고 각 노드마다 포인터를 가지고 있어 메모리 공간이 더 많이 필요합니다.",
    "category": "자료 구조",
    "keywords": ["연결 리스트", "삽입", "삭제", "포인터", "접근"]
  },
  {
    "question": "스택이란 무엇인가요?",
    "answer": "스택은 후입선출(LIFO) 원칙을 따르는 자료구조로, 삽입과 삭제가 같은 위치에서 이루어집니다.",
    "category": "자료 구조",
    "keywords": ["스택", "LIFO", "삽입", "삭제"]
  },
  {
    "question": "스택의 활용 예시는 무엇이 있나요?",
    "answer": "스택은 괄호 짝 검사, 수식 계산, 함수 호출 등 다양한 분야에서 활용됩니다.",
    "category": "자료 구조",
    "keywords": ["스택", "괄호 검사", "수식 계산", "함수 호출"]
  },
  {
    "question": "큐란 무엇인가요?",
    "answer": "큐는 선입선출(FIFO) 원칙을 따르는 자료구조로, 삽입은 한 쪽 끝에서, 삭제는 다른 쪽 끝에서 이루어집니다.",
    "category": "자료 구조",
    "keywords": ["큐", "FIFO", "삽입", "삭제"]
  },
  {
    "question": "큐의 활용 예시는 무엇이 있나요?",
    "answer": "큐는 CPU 스케줄링, 네트워크 패킷 처리, 버퍼 등 다양한 분야에서 활용됩니다.",
    "category": "자료 구조",
    "keywords": ["큐", "CPU 스케줄링", "패킷", "버퍼"]
  },
  {
    "question": "이진 탐색이란 무엇인가요?",
    "answer": "이진 탐색은 정렬된 배열에서 원하는 값을 찾는 알고리즘으로, 탐색 범위를 반씩 줄여가며 값을 찾습니다.",
    "category": "알고리즘",
    "keywords": ["이진 탐색", "정렬", "탐색", "이진"]
  },
  {
    "question": "이진 탐색의 시간 복잡도는 어떻게 되나요?",
    "answer": "이진 탐색의 시간 복잡도는 O(log n)입니다.",
    "category": "알고리즘",
    "keywords": ["이진 탐색", "시간 복잡도", "O(log n)"]
  },
  {
    "question": "퀵 정렬이란 무엇인가요?",
    "answer": "퀵 정렬은 분할 정복 알고리즘으로, 배열을 pivot 값 기준으로 두 부분으로 나눈 뒤 각 부분을 재귀적으로 정렬하는 방식입니다.",
    "category": "알고리즘",
    "keywords": ["퀵 정렬", "분할 정복", "pivot", "정렬"]
  },
  {
    "question": "퀵 정렬의 시간 복잡도는 어떻게 되나요?",
    "answer": "퀵 정렬의 평균 시간 복잡도는 O(n log n)이며, 최악의 경우 O(n^2)가 될 수 있습니다.",
    "category": "알고리즘",
    "keywords": ["퀵 정렬", "시간 복잡도", "O(n log n)", "O(n^2)"]
  },
  {
    "question": "병합 정렬이란 무엇인가요?",
    "answer": "병합 정렬은 분할 정복 알고리즘으로, 배열을 두 부분으로 나눈 뒤 각 부분을 재귀적으로 정렬한 후 병합하는 방식입니다.",
    "category": "알고리즘",
    "keywords": ["병합 정렬", "분할 정복", "병합", "정렬"]
  },
  {
    "question": "병합 정렬의 시간 복잡도는 어떻게 되나요?",
    "answer": "병합 정렬의 시간 복잡도는 항상 O(n log n)입니다.",
    "category": "알고리즘",
    "keywords": ["병합 정렬", "시간 복잡도", "O(n log n)"]
  },
  {
    "question": "깊이 우선 탐색이란 무엇인가요?",
    "answer": "깊이 우선 탐색은 그래프에서 한 정점을 시작으로 깊이를 우선으로 탐색하는 알고리즘입니다.",
    "category": "알고리즘",
    "keywords": ["깊이 우선 탐색", "DFS", "그래프", "탐색"]
  },
  {
    "question": "깊이 우선 탐색의 시간 복잡도는 어떻게 되나요?",
    "answer": "깊이 우선 탐색의 시간 복잡도는 인접 리스트로 표현된 그래프에서는 O(V+E), 인접 행렬로 표현된 그래프에서는 O(V^2)입니다.",
    "category": "알고리즘",
    "keywords": ["깊이 우선 탐색", "시간 복잡도", "그래프", "O(V+E)", "O(V^2)"]
  },
  {
    "question": "너비 우선 탐색이란 무엇인가요?",
    "answer": "너비 우선 탐색은 그래프에서 한 정점을 시작으로 인접한 정점들을 우선적으로 탐색하는 알고리즘입니다.",
    "category": "알고리즘",
    "keywords": ["너비 우선 탐색", "BFS", "그래프", "탐색"]
  },
  {
    "question": "프로세스와 스레드의 차이는 무엇인가요?",
    "answer": "프로세스는 실행 중인 프로그램으로, 독립된 메모리 공간, 파일 핸들러, 프로세스 ID 등을 가지고 있습니다. 스레드는 프로세스 내에서 실행되는 작은 실행 단위로, 프로세스 내의 메모리 공간을 공유합니다.",
    "category": "운영체제",
    "keywords": ["프로세스", "스레드", "메모리", "실행 단위"]
  },
  {
    "question": "스레드의 장단점은 무엇인가요?",
    "answer": "스레드의 장점으로는 프로세스보다 적은 메모리를 사용하고, 프로세스 간의 통신보다 더 빠르게 데이터를 공유할 수 있다는 것이 있습니다. 단점으로는 스레드 간의 동기화 문제와 경합 상태 등이 있습니다.",
    "category": "운영체제",
    "keywords": ["스레드", "메모리", "동기화", "경합"]
  },
  {
    "question": "프로세스 동기화란 무엇인가요?",
    "answer": "프로세스 동기화는 여러 개의 프로세스가 공유된 자원에 동시에 접근할 때, 서로 간섭이 없도록 하는 기술입니다.",
    "category": "운영체제",
    "keywords": ["프로세스", "동기화", "자원", "경쟁 상태"]
  },
  {
    "question": "뮤텍스와 세마포어의 차이는 무엇인가요?",
    "answer": "뮤텍스는 하나의 프로세스나 스레드가 공유 자원에 접근할 때 다른 접근을 막는 기술이고, 세마포어는 허용된 개수만큼의 접근을 제어하는 기술입니다.",
    "category": "운영체제",
    "keywords": ["뮤텍스", "세마포어", "동기화", "공유 자원"]
  },
  {
    "question": "캐시란 무엇인가요?",
    "answer": "캐시는 CPU의 성능을 향상시키기 위해 사용되는 메모리 계층 구조 중 가장 빠른 메모리입니다. 자주 사용하는 데이터를 저장하여 빠르게 접근할 수 있습니다.",
    "category": "운영체제",
    "keywords": ["캐시", "CPU", "메모리", "성능"]
  },
  {
    "question": "캐시 미스와 캐시 히트의 차이는 무엇인가요?",
    "answer": "캐시 미스는 CPU가 원하는 데이터가 캐시에 없는 경우이고, 캐시 히트는 데이터가 이미 캐시에 있어 빠르게 접근 가능한 경우입니다.",
    "category": "운영체제",
    "keywords": ["캐시", "미스", "히트", "CPU"]
  },
  {
    "question": "가상 메모리란 무엇인가요?",
    "answer": "가상 메모리는 물리 메모리보다 큰 메모리 공간을 프로세스에 제공하여, 각 프로세스가 독립된 메모리 공간을 가지도록 하는 기술입니다.",
    "category": "운영체제",
    "keywords": ["가상 메모리", "프로세스", "물리 메모리", "독립"]
  },
  {
    "question": "페이지 교체 알고리즘이란 무엇인가요?",
    "answer": "페이지 교체 알고리즘은 페이지 부재가 발생했을 때, 어떤 페이지를 교체할지 결정하는 알고리즘입니다. FIFO, LRU, LFU 등이 있습니다.",
    "category": "운영체제",
    "keywords": ["페이지 교체", "알고리즘", "FIFO", "LRU", "LFU"]
  },
  {
    "question": "프로세스 스케줄링이란 무엇인가요?",
    "answer": "프로세스 스케줄링은 CPU가 어떤 프로세스를 실행할지 결정하는 기술로, 다양한 스케줄링 알고리즘에 따라 우선순위가 정해집니다.",
    "category": "운영체제",
    "keywords": ["프로세스", "스케줄링", "CPU", "우선순위"]
  },
  {
    "question": "선점형 스케줄링과 비선점형 스케줄링의 차이는 무엇인가요?",
    "answer": "선점형은 실행 중인 프로세스를 중단하고 다른 프로세스로 전환이 가능한 스케줄링이고, 비선점형은 현재 프로세스가 종료될 때까지 실행을 유지하는 방식입니다.",
    "category": "운영체제",
    "keywords": ["스케줄링", "선점형", "비선점형", "프로세스"]
  },
  {
    "question": "데이터베이스란 무엇인가요?",
    "answer": "데이터베이스는 데이터를 저장하고 관리하는 시스템입니다.",
    "category": "데이터베이스",
    "keywords": ["데이터베이스", "저장", "관리", "시스템"]
  },
  {
    "question": "데이터베이스의 종류는 무엇이 있나요?",
    "answer": "관계형 데이터베이스, NoSQL 데이터베이스, 그래프 데이터베이스 등 다양한 종류의 데이터베이스가 있습니다.",
    "category": "데이터베이스",
    "keywords": ["데이터베이스", "관계형", "NoSQL", "그래프"]
  },
  {
    "question": "관계형 데이터베이스란 무엇인가요?",
    "answer": "관계형 데이터베이스는 데이터를 테이블 형태로 저장하고, SQL을 이용하여 데이터를 관리합니다.",
    "category": "데이터베이스",
    "keywords": ["관계형", "테이블", "SQL", "데이터베이스"]
  },
  {
    "question": "SQL이란 무엇인가요?",
    "answer": "SQL은 관계형 데이터베이스에서 데이터를 조작하고 질의하기 위한 언어입니다.",
    "category": "데이터베이스",
    "keywords": ["SQL", "관계형", "질의", "조작"]
  },
  {
    "question": "데이터베이스 인덱스란 무엇인가요?",
    "answer": "인덱스는 특정 컬럼의 값을 기준으로 검색 속도를 빠르게 해주는 자료구조입니다.",
    "category": "데이터베이스",
    "keywords": ["인덱스", "검색 속도", "컬럼", "데이터베이스"]
  },
  {
    "question": "외래키란 무엇인가요?",
    "answer": "외래키는 한 테이블의 컬럼이 다른 테이블의 기본키를 참조하는 제약 조건입니다.",
    "category": "데이터베이스",
    "keywords": ["외래키", "기본키", "참조", "테이블"]
  },
  {
    "question": "트랜잭션이란 무엇인가요?",
    "answer": "트랜잭션은 여러 작업을 하나의 논리적인 단위로 묶어 처리하는 것으로, 데이터의 일관성과 무결성을 보장합니다.",
    "category": "데이터베이스",
    "keywords": ["트랜잭션", "일관성", "무결성", "단위"]
  },
  {
    "question": "무결성 제약 조건이란 무엇인가요?",
    "answer": "무결성 제약 조건은 데이터의 정확성과 일관성을 유지하기 위해 설정하는 규칙입니다.",
    "category": "데이터베이스",
    "keywords": ["무결성", "제약 조건", "정확성", "일관성"]
  },
  {
    "question": "샤딩이란 무엇인가요?",
    "answer": "샤딩은 데이터를 수평으로 분할하여 여러 서버에 분산 저장함으로써 성능을 향상시키는 기술입니다.",
    "category": "데이터베이스",
    "keywords": ["샤딩", "분산", "수평 분할", "성능"]
  },
  {
    "question": "데이터베이스 복제란 무엇인가요?",
    "answer": "복제는 하나의 데이터베이스 내용을 다른 데이터베이스에 복사하여 장애 대응과 부하 분산에 활용하는 기술입니다.",
    "category": "데이터베이스",
    "keywords": ["복제", "마스터", "슬레이브", "부하 분산"]
  },
  {
    "question": "NoSQL 데이터베이스란 무엇인가요?",
    "answer": "NoSQL은 정해진 스키마 없이 데이터를 저장하며, 유연한 구조와 확장성을 제공하는 데이터베이스입니다.",
    "category": "데이터베이스",
    "keywords": ["NoSQL", "스키마 없음", "유연성", "확장성"]
  },
  {
    "question": "NoSQL 데이터베이스의 종류는 어떤 것이 있나요?",
    "answer": "Key-Value Store, Document Store, Column Store, Graph Database 등 다양한 종류가 있습니다.",
    "category": "데이터베이스",
    "keywords": ["NoSQL", "Key-Value", "Document", "Graph", "Column"]
  },
  {
    "question": "ACID란 무엇인가요?",
    "answer": "ACID는 트랜잭션의 4가지 속성인 원자성, 일관성, 고립성, 지속성을 의미하며, 데이터의 신뢰성을 보장합니다.",
    "category": "데이터베이스",
    "keywords": ["ACID", "원자성", "일관성", "고립성", "지속성"]
  },
  {
    "question": "CAP 이론이란 무엇인가요?",
    "answer": "CAP 이론은 분산 시스템에서 일관성, 가용성, 네트워크 분할 허용성 중 두 가지만 보장할 수 있다는 이론입니다.",
    "category": "데이터베이스",
    "keywords": ["CAP 이론", "일관성", "가용성", "분할 허용성"]
  },
  {
    "question": "데이터베이스 인덱스의 장단점은 무엇인가요?",
    "answer": "인덱스는 검색 속도를 높이는 장점이 있지만, 삽입/수정/삭제 성능이 저하될 수 있습니다.",
    "category": "데이터베이스",
    "keywords": ["인덱스", "검색 속도", "삽입", "수정", "삭제"]
  },
  {
    "question": "OSI 7계층이란 무엇인가요?",
    "answer": "OSI 7계층은 Open Systems Interconnection Reference Model의 약어로, 네트워크 프로토콜 스택을 구성하는 7개의 계층을 말합니다. 이 계층은 데이터 전송 과정을 각각의 계층으로 분리하여 관리하고, 표준화된 인터페이스를 제공함으로써 서로 다른 네트워크 장비 및 프로토콜 간의 상호 운용성을 보장합니다.",
    "category": "네트워크",
    "keywords": ["OSI 7계층", "프로토콜 스택", "표준화", "계층 구조"]
  },
  {
    "question": "TCP와 UDP의 차이점은 무엇인가요?",
    "answer": "TCP는 연결 지향적이며, 신뢰성 있는 데이터 전송을 보장합니다. 반면 UDP는 비연결성이며, 빠른 전송 속도와 적은 오버헤드로 실시간 응용프로그램에 적합합니다.",
    "category": "네트워크",
    "keywords": ["TCP", "UDP", "신뢰성", "속도", "연결성"]
  },
  {
    "question": "HTTP와 HTTPS의 차이점은 무엇인가요?",
    "answer": "HTTP는 데이터를 암호화하지 않으며 보안에 취약하지만, HTTPS는 SSL/TLS를 사용하여 데이터를 암호화하고 서버 인증을 통해 보안성을 강화합니다.",
    "category": "네트워크",
    "keywords": ["HTTP", "HTTPS", "암호화", "SSL", "TLS", "보안"]
  },
  {
    "question": "DNS 서버란 무엇인가요?",
    "answer": "DNS 서버는 도메인 이름을 IP 주소로 변환하는 역할을 합니다. 이를 통해 사용자는 도메인 이름만으로 서버에 접근할 수 있습니다.",
    "category": "네트워크",
    "keywords": ["DNS", "도메인", "IP 주소", "변환"]
  },
  {
    "question": "OSI 7계층에서 각각의 계층이 하는 일은 무엇인가요?",
    "answer": "OSI 7계층은 네트워크 통신을 7단계로 나눈 모델입니다. 물리 계층은 데이터를 전기/광 신호로 변환하여 전송하며, 데이터 링크 계층은 오류 제어 및 프레임 단위 관리 기능을 제공합니다. 네트워크 계층은 라우팅과 패킷 전달을 담당하고, 전송 계층은 TCP/UDP를 통해 오류 복구와 흐름 제어를 수행합니다. 세션 계층은 연결의 시작과 종료를 관리하고, 표현 계층은 데이터 형식의 변환, 압축, 암호화를 담당합니다. 응용 계층은 사용자가 접하는 계층으로 HTTP, FTP, SMTP 등의 프로토콜을 사용합니다.",
    "category": "네트워크",
    "keywords": ["OSI 7계층", "물리 계층", "데이터 링크 계층", "네트워크 계층", "전송 계층", "세션 계층", "표현 계층", "응용 계층", "프로토콜", "TCP", "HTTP"]
  },
  {
    "question": "ARP와 RARP는 무엇인가요?",
    "answer": "ARP는 IP 주소를 MAC 주소로 변환하는 프로토콜이고, RARP는 MAC 주소를 IP 주소로 변환하는 프로토콜입니다.",
    "category": "네트워크",
    "keywords": ["ARP", "RARP", "MAC 주소", "IP 주소", "변환"]
  },
  {
    "question": "포트 번호는 무엇이고, 어떻게 사용되나요?",
    "answer": "포트 번호는 인터넷 프로토콜에서 프로세스를 식별하기 위한 번호입니다. 예를 들어 80번은 HTTP, 443번은 HTTPS에 사용됩니다.",
    "category": "네트워크",
    "keywords": ["포트 번호", "HTTP", "HTTPS", "프로세스", "식별"]
  },
  {
    "question": "객체지향 프로그래밍이란 무엇인가요?",
    "answer": "객체지향 프로그래밍(OOP, Object-Oriented Programming)은 객체(Object)를 기본적인 프로그래밍 단위로 삼는 프로그래밍 패러다임입니다. 객체란 데이터와 이를 다루는 메서드(함수)를 포함하는 소프트웨어 개체를 의미합니다. 객체지향 프로그래밍에서는 각 객체가 독립적인 존재로서, 다른 객체와 상호작용하면서 프로그램을 실행합니다. OOP의 핵심 개념으로는 캡슐화(Encapsulation), 상속(Inheritance), 다형성(Polymorphism)이 있습니다.",
    "category": "프로그래밍 언어",
    "keywords": ["객체지향", "OOP", "객체", "캡슐화", "상속", "다형성"]
  },
  {
    "question": "상속과 인터페이스의 차이점은 무엇인가요?",
    "answer": "상속과 인터페이스는 객체지향 프로그래밍에서 코드 재사용을 위한 두 가지 기술입니다. 상속은 부모 클래스의 특성을 자식 클래스에서도 그대로 사용할 수 있도록 하는 기술입니다. 자식 클래스는 부모 클래스에서 정의된 멤버 변수와 메서드를 그대로 상속받아 사용할 수 있습니다. 반면, 인터페이스는 구현이 없는 추상적인 메서드와 상수로만 구성된 일종의 명세서입니다. 인터페이스를 구현하는 클래스는 반드시 인터페이스에서 정의된 메서드를 모두 구현해야 합니다. 인터페이스를 사용하면 다중 상속을 흉내내거나, 유연한 코드를 작성하는 데 도움이 됩니다.",
    "category": "프로그래밍 언어",
    "keywords": ["상속", "인터페이스", "객체지향", "코드 재사용", "다형성"]
  },
  {
    "question": "Java의 Garbage Collection(GC)이란 무엇인가요?",
    "answer": "Java에서 GC는 메모리 관리를 자동으로 처리하는 기술입니다. Java에서는 new 연산자를 사용하여 객체를 생성하면, JVM은 객체를 저장할 공간을 자동으로 할당하고, 객체의 참조 카운트(Reference Count)를 증가시킵니다. 참조 카운트가 0이 되면 GC가 해당 객체를 메모리에서 제거합니다. GC는 메모리 사용량이 많아지면, 메모리 누수(Memory Leak)를 방지하고, 메모리 사용을 최적화하기 위해 주기적으로 실행됩니다.",
    "category": "프로그래밍 언어",
    "keywords": ["Java", "Garbage Collection", "GC", "JVM", "메모리 관리", "객체"]
  },
  {
    "question": "Call by value와 Call by reference의 차이점은 무엇인가요?",
    "answer": "Call by value와 Call by reference는 함수 호출 방식에 따라 인수(Parameter)를 전달하는 방식을 나타내는 용어입니다. Call by value는 값에 의한 호출 방식으로, 함수의 인수를 복사하여 전달합니다. 함수 내에서 인수 값을 변경해도, 호출한 측에는 영향을 주지 않습니다. 반면, Call by reference는 참조에 의한 호출 방식으로, 함수의 인수로 변수의 주소를 전달합니다. 따라서 함수 내에서 인수 값을 변경하면, 호출한 측에서도 영향을 받습니다.",
    "category": "프로그래밍 언어",
    "keywords": ["Call by value", "Call by reference", "함수 호출", "복사", "주소 전달"]
  },
  {
    "question": "다형성(Polymorphism)이란 무엇인가요?",
    "answer": "다형성은 객체지향 프로그래밍에서 사용되는 개념으로, 동일한 이름의 메서드나 연산자가 다양한 객체에서 다양하게 동작할 수 있도록 하는 것입니다. 예를 들어, 부모 클래스의 메서드를 자식 클래스에서 오버라이딩하여 사용할 수 있으며, 각 클래스에서 메서드의 내용이 다르게 구현될 수 있습니다. 이렇게 같은 이름의 메서드를 다른 방식으로 동작하도록 하는 것을 메서드 오버라이딩(Method Overriding)이라고 합니다. 또한, 다양한 타입의 객체를 같은 타입으로 처리할 수 있는 것을 다형성이라고 합니다. 이를 이용하여 객체의 유연한 처리가 가능합니다.",
    "category": "프로그래밍 언어",
    "keywords": ["다형성", "오버라이딩", "오버로딩", "객체지향", "유연성"]
  },
  {
    "question": "제네릭(Generic)이란 무엇인가요?",
    "answer": "제네릭은 클래스나 메서드에서 사용하는 타입을 런타임이 아닌 컴파일 타임에 결정하는 기술입니다. 제네릭을 사용하면 코드의 재사용성을 높이고, 타입 안정성을 보장할 수 있습니다. 제네릭을 사용하여 컴파일 타임에 타입을 결정하면, 런타임 시 타입 캐스팅(Type Casting)에 따른 오류를 줄일 수 있습니다. 또한, 제네릭 타입을 사용하면 컬렉션(Collection)과 같은 자료구조에서 다양한 타입의 객체를 저장할 수 있으며, 이를 활용하여 코드의 재사용성과 타입 안정성을 동시에 보장할 수 있습니다.",
    "category": "프로그래밍 언어",
    "keywords": ["제네릭", "타입 안정성", "재사용성", "컴파일 타임", "컬렉션"]
  },
  {
    "question": "스레드(Thread)란 무엇인가요?",
    "answer": "스레드는 프로세스(Process) 내에서 실행되는 실행 단위로, 하나의 프로세스 내에서 여러 개의 스레드가 동시에 실행될 수 있습니다. 스레드는 별도의 프로세스 공간을 할당받지 않으므로, 프로세스와 비교하여 자원을 적게 사용합니다. 여러 개의 스레드를 사용하여 동시에 여러 작업을 처리할 수 있으며, 이를 이용하여 프로그램의 성능을 향상시킬 수 있습니다. 하지만, 스레드는 공유 자원에 대한 동기화 문제를 야기할 수 있으므로, 스레드 간의 동기화를 보장해야 합니다. 스레드는 프로그램의 복잡도를 높여, 디버깅과 유지보수가 어려워질 수 있습니다.",
    "category": "프로그래밍 언어",
    "keywords": ["스레드", "실행 단위", "프로세스", "동기화", "병렬 처리"]
  },
  {
    "question": "데드락(Deadlock)이란 무엇인가요?",
    "answer": "데드락은 두 개 이상의 프로세스나 스레드가 서로 상대방의 자원을 점유하고, 그 상태에서 무한히 대기하게 되는 상황을 의미합니다. 이러한 상황에서는 어느 한 쪽이 자원을 포기하지 않으면 계속 대기 상태가 유지되어, 프로그램이 더 이상 진행되지 않습니다. 데드락을 방지하기 위해서는 자원에 대한 접근을 보장하기 위한 프로토콜이 필요합니다. 대표적으로 사용되는 방식으로는 교착 상태 회피(Deadlock Avoidance), 교착 상태 탐지(Deadlock Detection), 교착 상태 회복(Deadlock Recovery)이 있습니다.",
    "category": "프로그래밍 언어",
    "keywords": ["데드락", "교착 상태", "자원", "대기", "회피", "탐지", "회복"]
  },
  {
    "question": "오버로딩(Overloading)과 오버라이딩(Overriding)의 차이점은 무엇인가요?",
    "answer": "오버로딩과 오버라이딩은 메서드의 다형성을 구현하는 방식입니다. 오버로딩은 같은 이름의 메서드를 여러 개 정의하고, 매개변수의 개수나 타입, 반환값의 타입 등을 다르게하여 사용하는 것입니다. 오버로딩을 사용하면 메서드 이름을 일관된 방식으로 유지하면서, 여러 가지 상황에서 유연한 사용이 가능합니다. 반면, 오버라이딩은 부모 클래스에서 정의된 메서드를 자식 클래스에서 새롭게 구현하는 것입니다. 자식 클래스에서 오버라이딩한 메서드는 부모 클래스에서 정의된 메서드와 같은 이름, 매개변수, 반환값을 가집니다. 이러한 메서드 오버라이딩은 다형성을 구현하는 가장 대표적인 방법 중 하나입니다.",
    "category": "프로그래밍 언어",
    "keywords": ["오버로딩", "오버라이딩", "메서드", "다형성", "상속", "재정의"]
  },
  {
    "question": "XSS(Cross-site scripting)이란 무엇인가요?",
    "answer": "XSS(Cross-site scripting)은 웹 애플리케이션 취약점 중 하나로, 해커가 악의적인 스크립트를 삽입하여 공격을 수행할 수 있는 것을 말합니다. 이를 방지하기 위해서는 사용자의 입력값을 검증하고, 적절한 인코딩 처리를 해주는 등의 보안 조치가 필요합니다.",
    "category": "보안",
    "keywords": ["XSS", "Cross-site scripting", "스크립트 삽입", "입력 검증", "인코딩"]
  },
  {
    "question": "SQL Injection(Injection)이란 무엇인가요?",
    "answer": "SQL Injection은 악의적인 사용자가 SQL 쿼리를 조작하여 데이터베이스를 공격하는 기술입니다. 이를 방지하기 위해서는 입력값을 검증하고, 파라미터화된 쿼리를 사용하는 등의 방어 조치가 필요합니다.",
    "category": "보안",
    "keywords": ["SQL Injection", "쿼리 조작", "데이터베이스", "입력 검증", "파라미터화"]
  },
  {
    "question": "HTTPS와 HTTP의 차이점은 무엇인가요?",
    "answer": "HTTPS와 HTTP는 모두 인터넷에서 데이터를 전송하는 프로토콜입니다. 그러나 HTTPS는 HTTP에 보안 기능을 추가한 것으로, 데이터를 암호화하여 전송하는 방식입니다. 이를 통해 데이터가 중간에 가로채어지더라도 암호화된 데이터를 해독할 수 없어 보안성이 향상됩니다.",
    "category": "보안",
    "keywords": ["HTTPS", "HTTP", "보안", "암호화", "전송", "인터넷 프로토콜"]
  },
  {
    "question": "CORS(Cross-Origin Resource Sharing)란 무엇인가요?",
    "answer": "CORS(Cross-Origin Resource Sharing)는 웹 브라우저에서 다른 출처(origin)의 자원을 요청하는 것을 제어하는 보안 메커니즘입니다. 이를 통해 악의적인 스크립트로부터 사용자 데이터를 보호할 수 있습니다. CORS를 구현하기 위해서는 서버에서 Access-Control-Allow-Origin 헤더를 설정하고, 프론트엔드에서 XMLHttpRequest 객체를 사용하여 요청을 보내야 합니다.",
    "category": "보안",
    "keywords": ["CORS", "Cross-Origin", "보안 메커니즘", "Access-Control-Allow-Origin", "브라우저"]
  },
  {
    "question": "Agile 방법론이란 무엇인가요?",
    "answer": "Agile 방법론은 소프트웨어 개발에서 요구사항의 변경과 적응에 대한 유연한 대처를 중시하는 개발 방법론입니다. 작은 주기를 반복하면서 빠른 프로토타이핑과 피드백을 통해 개발을 진행하며, 팀원 간의 소통과 협업을 강조합니다.",
    "category": "소프트웨어 개발 방법론",
    "keywords": ["Agile", "애자일", "반복 개발", "피드백", "협업"]
  },
  {
    "question": "Waterfall 방법론이란 무엇인가요?",
    "answer": "Waterfall 방법론은 소프트웨어 개발에서 각 단계를 순차적으로 진행하는 개발 방법론입니다. 요구사항 수집, 설계, 개발, 테스트, 배포 등의 단계를 한 번에 진행하며, 각 단계가 완료되어야 다음 단계로 진행됩니다.",
    "category": "소프트웨어 개발 방법론",
    "keywords": ["Waterfall", "폭포수", "순차적 개발", "단계별 진행"]
  },
  {
    "question": "Scrum이란 무엇인가요?",
    "answer": "Scrum은 Agile 방법론 중 하나로, 작은 팀이 빠르게 협력하여 소프트웨어를 개발하는 방법론입니다. 제품 백로그를 기반으로 일정한 주기(스프린트)를 반복하면서 개발을 진행하며, 매일 짧은 회의를 통해 팀원들이 서로의 진행 상황을 공유합니다.",
    "category": "소프트웨어 개발 방법론",
    "keywords": ["Scrum", "스프린트", "백로그", "애자일", "회의", "협업"]
  },
  {
    "question": "TDD(Test Driven Development)란 무엇인가요?",
    "answer": "TDD(Test Driven Development)는 테스트를 먼저 작성하고 이를 기반으로 소프트웨어를 개발하는 방법론입니다. 작성한 테스트를 통과할 수 있는 최소한의 코드를 작성하고, 이를 반복적으로 개선하여 최종 소프트웨어를 완성합니다. 이를 통해 소프트웨어의 품질을 향상시킬 수 있습니다.",
    "category": "소프트웨어 개발 방법론",
    "keywords": ["TDD", "테스트 주도 개발", "품질", "반복 개발", "테스트 코드"]
  }
]

